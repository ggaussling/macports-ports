diff --git Modules/clinic/posixmodule.c.h Modules/clinic/posixmodule.c.h
index c0d1d4d..7052678 100644
--- Modules/clinic/posixmodule.c.h
+++ Modules/clinic/posixmodule.c.h
@@ -4975,7 +4975,7 @@ exit:
     return return_value;
 }
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED >= 1050
 
 PyDoc_STRVAR(os__fcopyfile__doc__,
 "_fcopyfile($module, infd, outfd, flags, /)\n"
diff --git Modules/posixmodule.c Modules/posixmodule.c
index b09204d..78b2909 100644
--- Modules/posixmodule.c
+++ Modules/posixmodule.c
@@ -109,7 +109,7 @@ corresponding Unix manual entries for more information on calls.");
 #include <sys/sendfile.h>
 #endif
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED >= 1050
 #include <copyfile.h>
 #endif
 
@@ -9153,7 +9153,7 @@ done:
 #endif /* HAVE_SENDFILE */
 
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED >= 1050
 /*[clinic input]
 os._fcopyfile
 
@@ -14222,7 +14222,7 @@ all_ins(PyObject *m)
 #endif
 #endif
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED >= 1050
     if (PyModule_AddIntConstant(m, "_COPYFILE_DATA", COPYFILE_DATA)) return -1;
 #endif
 
diff --git Python/thread_pthread.h Python/thread_pthread.h
index 5678b05..5cfdd17 100644
--- Python/thread_pthread.h
+++ Python/thread_pthread.h
@@ -14,6 +14,8 @@
 
 #if defined(__linux__)
 #   include <sys/syscall.h>     /* syscall(SYS_gettid) */
+#elif defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED < 1060
+#   include <sys/syscall.h>     /* syscall(SYS_gettid) */
 #elif defined(__FreeBSD__)
 #   include <pthread_np.h>      /* pthread_getthreadid_np() */
 #elif defined(__OpenBSD__)
@@ -325,9 +327,12 @@ PyThread_get_thread_native_id(void)
 {
     if (!initialized)
         PyThread_init_thread();
-#ifdef __APPLE__
+#if defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED >= 1060
     uint64_t native_id;
     (void) pthread_threadid_np(NULL, &native_id);
+#elif defined(__APPLE__) && MACOSX_VERSION_MAX_ALLOWED < 1060
+    pid_t native_id;
+    native_id = syscall(SYS_gettid);
 #elif defined(__linux__)
     pid_t native_id;
     native_id = syscall(SYS_gettid);


# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           muniversal 1.0

name                OpenBLAS
categories          math science
license             BSD
maintainers         {nicos @NicosPavlov} {michaelld @michaelld} openmaintainer
description         OpenBLAS is an optimized BLAS library based on GotoBLAS2
long_description    ${description}
platforms           darwin

compiler.thread_local_storage yes
compiler.require_fortran      yes

# Define target based on version of OS
# OS 10.5 supports down to Intel Core Solo (Intel) or PowerPC G4
# this is "YONAH" but known to OpenBLAS builds as 
# PentiumM https://en.wikipedia.org/wiki/Intel_Core#Enhanced_Pentium_M
# YONAH is 32bit only
if {${os.major} == 9} { 
    if {${os.arch} eq "i386" || [variant_isset universal]} {
        set blas_arch "YONAH"
    } else {
        set blas_arch "PPCG4"
    }
}
# OS 10.6 supports down to Intel Core Solo architecture (32bit only)
# otherwise it's 64bit processor is a Core2
if {${os.major} == 10} { 
    set blas_arch "YONAH"
}
#OS 10.7-10.11 supports down to iMac 7,1, with Intel Core 2 Duo architecture
#OS 10.12-13 supports down to iMac 10,1, with Intel Core 2 Duo architecture
if {${os.major} >= 11 && ${os.major} <= 17} { 
    set blas_arch "CORE2"
}
#OS 10.14 supports down to Mac Pro 5,1 that has Nehalem architecture
if {${os.major} >= 18} { 
    set blas_arch "NEHALEM"
} 
if {![info exists blas_arch]} {
    #For older versions, we force native variant as there is no PPCG3 target in OpenBLAS
    default_variants-append +native
}

subport OpenBLAS-devel {}
if {[string first "-devel" $subport] > 0} {

    github.setup    xianyi OpenBLAS c07d78b9e90c967c3194ebd0e66df87d3452613c
    version         20190930-[string range ${github.version} 0 7]
    checksums       rmd160 7e2fed6ca8ce9d4f4ce1d0436187c04e9d5cd2b0 \
                    sha256 6225d3138e4e9c7a97d9b6361d946510190156425b2eee295fffb92552142d81 \
                    size   12017610
    revision        0

    name            ${github.project}-devel
    conflicts       OpenBLAS

    patchfiles      patch-libnoarch.devel.diff \
                    patch-OpenBLAS-i386-Apple.diff

    github.livecheck.branch develop

    #Not using precompiled binaries in -devel support
    default_variants-append +native

} else {

#    if {[variant_isset universal]} {
#      ui_error "OpenBLAS 0.3.7 will not build +universal."
#      ui_error "Please use OpenBLAS-devel, until OpenBLAS 0.3.8 is released"
#    }

    github.setup    xianyi OpenBLAS 0.3.7 v
    checksums       rmd160 1e3698279f8d3084bfe9b34f22b33bfa56d8dbbf \
                    sha256 c8943b3ce749c3f5c1eb5a72982178f5f6e383b54f09525983aa6b0ca2966d49 \
                    size   11991860
    revision        0

    conflicts       OpenBLAS-devel

    patchfiles      patch-libnoarch.release.diff \
                    patch-OpenBLAS-i386-Apple.diff \
                    patch-openblas-add-yonah-support-to-x86-kernel.diff

    if {![variant_isset native]} {
        notes "
        This version is built based on a base architecture for convenience, 
        which may not be optimized for your system. To build a version 
        customized for your machine, use the +native variant"
    }
}

variant lapack description "Add Lapack/CLapack support to the library" { }
default_variants-append +lapack +universal

#+native +universal

variant native description "Force compilation on machine to get fully optimized library" {
    # Prevent precompiled binaries to let compilation optimise the library for the user processor
    archive_sites
}

configure.cmd /usr/bin/true
proc openblas_setup {arch makeINC} {
			global configure.cc configure.fc build_arch blas_arch
			puts $makeINC "VERSION = 1"
			puts $makeINC "LIBNAMESUFFIX = "
		
			puts $makeINC "CC = ${configure.cc}"
			puts $makeINC "FC = ${configure.fc}"

			switch -- $arch {
				x86_64  { puts $makeINC "ARCH = x86_64"; puts $makeINC "BINARY = 64" }
				i386    { puts $makeINC "ARCH = x86"   ; puts $makeINC "BINARY = 32" }
				ppc64   { puts $makeINC "ARCH = power" ; puts $makeINC "BINARY = 64" }
				ppc     { puts $makeINC "ARCH = power" ; puts $makeINC "BINARY = 32" }
				default { }
			}
		
			puts $makeINC "COMMON_OPT = -O3"
			puts $makeINC "COMMON_PROF = -pg"
		
			if {![variant_isset lapack]} {
				puts $makeINC "NO_LAPACK = 1"
			}
		
			if {![variant_isset native]} { 
				#We set a minimal target in case native variant is not set
				if {${build_arch} eq "ppc" || ${build_arch} eq "ppc64"} {
					puts $makeINC "TARGET = PPCG4"
				} else {
					puts $makeINC "TARGET = ${blas_arch}"
				}
			}
}

post-configure {
    if {[variant_isset universal]} {
        foreach arch ${universal_archs_to_use} {
            set makeINC [open ${worksrcpath}-${arch}/Makefile.rule "w"]
            openblas_setup $arch $makeINC
			close $makeINC
        }
    } else {
        set makeINC [open ${worksrcpath}/Makefile.rule "w"]
        openblas_setup $build_arch $makeINC
        close $makeINC
    }
}

depends_build-append port:cctools
build.args-append    "AR=${prefix}/bin/ar RANLIB=${prefix}/bin/ranlib"

platform darwin 8 {
    depends_build-append    port:gmake
    build.cmd               ${prefix}/bin/gmake

    depends_test-append     port:gmake
    test.cmd                build.cmd
}


destroot.args       "PREFIX=${prefix}"

if {[variant_isset universal]} {
    merger-post-destroot {
        foreach arch ${universal_archs_to_use} {
            if {${arch} ne ${build_arch}} {
                # openblas.pc records the processor name, which is different for 32-bit and 64-bit architectures
                # see https://github.com/xianyi/OpenBLAS/commit/eb9b021d3890429a41823dc3d90eb0d11c0a6d6d
                delete ${destroot}-${arch}${prefix}/lib/pkgconfig/openblas.pc
            }
            move ${destroot}-${arch}${prefix}/include/cblas.h \
                ${destroot}-${arch}${prefix}/include/cblas_openblas.h
            #Correct library name
            system "install_name_tool -id \
                ${prefix}/lib/libopenblas-r1.dylib \
                ${destroot}-${arch}${prefix}/lib/libopenblas-r1.dylib"
            delete file ${destroot}-${arch}${prefix}/lib/cmake
            if {[variant_isset lapack]} {
                #Install lapacke headers too
                set LAPACKE_DIR [exec /bin/ls ${worksrcpath}/lapack-netlib | \
                                     grep -i lapacke]
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_config.h \
                    ${destroot}-${arch}${prefix}/include/lapacke_config.h
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_mangling.h \
                    ${destroot}-${arch}${prefix}/include/lapacke_mangling.h
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_utils.h \
                    ${destroot}-${arch}${prefix}/include/lapacke_utils.h
                xinstall -m 755 ${worksrcpath}-${arch}/lapack-netlib/${LAPACKE_DIR}/include/lapacke.h \
                    ${destroot}-${arch}${prefix}/include/lapacke.h
            }
        }
    }
} else {
    post-destroot {
        #Avoid conflict with Atlas
        move ${destroot}${prefix}/include/cblas.h \
            ${destroot}${prefix}/include/cblas_openblas.h
        #Correct library name
        system "install_name_tool -id \
            ${prefix}/lib/libopenblas-r1.dylib \
            ${destroot}${prefix}/lib/libopenblas-r1.dylib"
        delete file ${destroot}${prefix}/lib/cmake
        if {[variant_isset lapack]} {
            #Install lapacke headers too
            set LAPACKE_DIR [exec /bin/ls ${worksrcpath}/lapack-netlib | \
                                 grep -i lapacke]
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_config.h \
                ${destroot}${prefix}/include/lapacke_config.h
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_mangling.h \
                ${destroot}${prefix}/include/lapacke_mangling.h
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke_utils.h \
                ${destroot}${prefix}/include/lapacke_utils.h
            xinstall -m 755 ${worksrcpath}/lapack-netlib/${LAPACKE_DIR}/include/lapacke.h \
                ${destroot}${prefix}/include/lapacke.h
        }
    }
}
